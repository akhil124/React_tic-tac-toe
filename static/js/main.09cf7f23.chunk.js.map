{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","win","setWin","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09cf7f23.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {FaTimes,FaPen,FaRegCircle} from \"react-icons/fa\";\r\nconst Icon=({name})=>{\r\n    switch (name){\r\n       \r\n        case 'circle':\r\n            return <FaRegCircle className=\"icons\"/>;\r\n        case 'cross':\r\n            return <FaTimes className=\"icons\"/>;\r\n            \r\n        default:\r\n            return <FaPen className=\"icons\"/>;\r\n                   \r\n    } \r\n};\r\nexport default Icon;","\n\nimport React,{useState} from 'react';\nimport Icon from \"./components/Icon\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {Card, CardBody,Container,Button,Col,Row} from \"reactstrap\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App=()=>{\n    const [isCross,setIsCross]=useState(false);\n    const [win,setWin]=useState(\"\");\n    const reloadGame=()=>{\n        setIsCross(false);\n        setWin(\"\");\n        itemArray.fill(\"empty\",0,9);\n    };\n    const checkWinner=()=>{\n         if(itemArray[0]===itemArray[1]&&itemArray[0]===itemArray[2]&&itemArray[0]!==\"empty\"){\n           setWin(`${itemArray[0]} wins`);\n         }\n         else if(itemArray[3]===itemArray[4]&&itemArray[4]===itemArray[5]&&itemArray[3]!==\"empty\"){\n          setWin(`${itemArray[3]} wins`); \n         }\n         else if(itemArray[6]===itemArray[7]&&itemArray[7]===itemArray[8]&&itemArray[6]!==\"empty\"){\n          setWin(`${itemArray[6]} wins`); \n         }\n         else if(itemArray[0]===itemArray[3]&&itemArray[3]===itemArray[6]&&itemArray[0]!==\"empty\"){\n          setWin(`${itemArray[0]} wins`); \n         }\n         else if(itemArray[1]===itemArray[4]&&itemArray[4]===itemArray[7]&&itemArray[1]!==\"empty\"){\n          setWin(`${itemArray[1]} wins`); \n         }\n         else if(itemArray[2]===itemArray[5]&&itemArray[5]===itemArray[8]&&itemArray[2]!==\"empty\"){\n          setWin(`${itemArray[2]} wins`); \n         }\n         else if(itemArray[0]===itemArray[4]&&itemArray[4]===itemArray[8]&&itemArray[0]!==\"empty\"){\n          setWin(`${itemArray[0]} wins`); \n         }\n         else if(itemArray[2]===itemArray[4]&&itemArray[4]===itemArray[6]&&itemArray[2]!==\"empty\"){\n          setWin(`${itemArray[2]} wins`); \n         }\n         \n    }\n    const changeItem=itemNumber=>{\n        if(win){\n          return toast(win,{type:\"success\"});\n        }\n        if(itemArray[itemNumber]===\"empty\"){\n          itemArray[itemNumber]=isCross? \"cross\":\"circle\"\n          setIsCross(!isCross);\n        }\n        else{\n            return toast(\"already filled\",{type:\"error\"})\n        }\n        checkWinner();\n    };\n  return (\n   <Container className=\"p-5\">\n     <ToastContainer position=\"bottom-center\"/>\n     <Row>\n       <Col md={6} className=\"offset-md-3\">\n         {win ? (\n           <div className=\"mb-2 mt-2\">\n            <h1 className=\"text-success text-uppercase text-center\">\n              {win}\n            </h1>\n            <Button \n            color=\"success\"\n            block onClick={reloadGame}>Reload the game</Button>\n           </div>\n         ) :(\n           <h1 className=\"text-center text-warning\">\n             {isCross?\"cross\": \"circle\" } turn\n           </h1>\n         )}\n         <div className=\"grid\">\n            {itemArray.map((item,index)=>(\n              <Card color=\"warning\" onClick={()=>changeItem(index) }>\n                <CardBody className=\"box\">\n                  <Icon name={item}/>\n                </CardBody>\n              </Card>\n            ))}\n         </div>\n       </Col>\n     </Row>\n     \n   </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}